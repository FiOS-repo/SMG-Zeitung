---
const { article } = Astro.params;

import "../../styles/input.css";
import Main from "../../layouts/Main.astro";
import Split from "../../layouts/Split.astro";

// Import Widgets
import Weather from "../../components/widgets/Weather.astro";
import Poll from "../../components/widgets/Poll.astro";
import NewArticles from "../../components/widgets/NewArticles.astro";
import Hashtags from "../../components/widgets/Hashtags.astro";

interface WeatherData {
  description?: string;
  temperature?: number;
  iconurl?: string;
}

interface Comment {
  id: number;
  author_name: string;
  content: { rendered: string };
  author_avatar_urls: { "96": string };
  author_user_role?: string; // Assuming WordPress includes user roles
}

// Async function for data fetching
async function fetchWeatherData() {
  let weatherData: WeatherData = {};
  try {
    const res = await fetch("http://localhost:3000/weather");
    if (!res.ok) throw new Error(`Failed to fetch weather data. Status: ${res.status}`);
    weatherData = await res.json();
  } catch (error) {
    console.error("Error fetching weather data:", error);
  }
  return weatherData;
}

async function fetchArticleData(slug: string) {
  let articleData: { id: number; name: string; content: string } | null = null;
  try {
    const res = await fetch(`https://wp.fiosproject.de/wp-json/wp/v2/posts?slug=${slug}`);
    if (!res.ok) throw new Error(`Failed to fetch article data. Status: ${res.status}`);
    const data = await res.json();
    if (data.length > 0) {
      articleData = {
        id: data[0].id,
        name: data[0].title.rendered,
        content: data[0].content.rendered,
      };
    } else {
      console.error("Article not found.");
    }
  } catch (error) {
    console.error("Error fetching article data:", error);
  }
  return articleData;
}

async function fetchComments(postId: number): Promise<Comment[]> {
  let comments: Comment[] = [];
  try {
    const username = "admin"; // Replace with your admin username
    const applicationPassword = "#EichendorffB2+"; // Replace with the generated password
    const credentials = btoa(`${username}:${applicationPassword}`);
    const res = await fetch(`https://wp.fiosproject.de/wp-json/wp/v2/comments?post=${postId}`, {
      method: "GET",
      headers: {
        Authorization: `Basic ${credentials}`,
      },
    });

    if (!res.ok) throw new Error(`Failed to fetch comments. Status: ${res.status}`);
    comments = await res.json();
  } catch (error) {
    console.error("Error fetching comments:", error);
  }
  return comments;
}


async function sendComment(postId: number, name: string, comment: string) {
  try {
    const res = await fetch("https://wp.fiosproject.de/wp-json/wp/v2/comments", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        post: postId,
        author_name: name,
        content: comment,
      }),
    });
    if (!res.ok) throw new Error(`Failed to send comment. Status: ${res.status}`);
    alert("Comment submitted successfully!");
  } catch (error) {
    console.error("Error submitting comment:", error);
    alert("Failed to submit comment.");
  }
}

const weatherData = await fetchWeatherData();
const articleData = await fetchArticleData(article);
const comments = articleData ? await fetchComments(articleData.id) : [];

const question = "Welches Betriebssystem verwenden Sie am häufigsten?";
const answers = JSON.stringify(["Windows", "macOS", "Linux", "Andere"]);

const pageTitle = `PINGUIN | ${article}`;
---

<Main>
  <Split>
    <div slot="Articles">
      <!--TODO: ZUrück Button-->
      <!--TODO: Wie lange muss ich noch das lesen aushalten-->
      <div class="max-w-3xl mx-auto p-6 bg-blue-200 rounded-3xl bg-clip-padding backdrop-filter backdrop-blur-3xl bg-opacity-20 ring-1 ring-blue-200 p-6 shadow-lg  flex-1 h-fit mb-5">
        {articleData && (
            <div>
              <h1 class="text-3xl text-blue-900 font-bold">{articleData.name}</h1>
              <div id="content" set:html={articleData.content}></div>
            </div>
        )}
        {!articleData && <p>Artikel konnte nicht geladen werden.</p>}
      </div>

      <!-- Comment Section -->
      <div class="max-w-3xl mx-auto p-6 bg-blue-100 rounded-3xl shadow-lg flex-1 h-fit mb-5">
        <h1>Kommentare</h1>
        {comments.length > 0 ? (
            comments.map((comment) => (
                <div class="max-w-3xl mx-auto p-6 bg-blue-200 rounded-3xl shadow-lg mb-4">
                  <div class="flex items-center">
                    <img src={comment.author_avatar_urls["96"]} alt={comment.author_name} class="w-12 h-12 rounded-full object-cover">
                    <h2 class="ml-4">{comment.author_name}</h2>
                    {comment.author_user_role === "administrator" && (
                        <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded ml-2">Admin</span>
                    )}
                  </div>
                  <p set:html={comment.content.rendered}></p>
                </div>
            ))
        ) : (
            <p>Keine Kommentare verfügbar.</p>
        )}
      </div>

      <!-- Comment Form -->
      <div class="max-w-3xl mx-auto p-6 bg-blue-100 rounded-3xl shadow-lg flex-1 h-fit">
        <h1>Kommentar Verfassen</h1>
        <form onSubmit={async (e) => {
          e.preventDefault();
          const form = e.target as HTMLFormElement;
          const name = (form.elements.namedItem("name") as HTMLInputElement).value;
          const comment = (form.elements.namedItem("comment") as HTMLTextAreaElement).value;
          if (articleData) {
            await sendComment(articleData.id, name, comment);
          }
        }} class="mx-auto">
          <div class="mb-5">
            <label for="name" class="block mb-2 text-sm font-medium text-gray-900">Dein Name</label>
            <input type="text" id="name" name="name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required />
          </div>
          <div class="mb-5">
            <label for="comment" class="block mb-2 text-sm font-medium text-gray-900">Dein Kommentar</label>
            <textarea id="comment" name="comment" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" required></textarea>
          </div>
          <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center">Submit</button>
        </form>
      </div>
    </div>

    <div slot="Widgets">
      <Weather degrees={weatherData.temperature} iconurl={weatherData.iconurl} />
      <Poll question={question} answers={answers} />
      <NewArticles articles={["Artikel 1", "Artikel 2", "Artikel 3"]} />
      <Hashtags hashtags={["Video", "Essen", "dsa"]} />
    </div>
  </Split>
</Main>
