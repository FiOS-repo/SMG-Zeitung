---
const fetchCategoryName = async (id: number) => {
    try {
        const res = await fetch(`https://wp.fiosproject.de/wp-json/wp/v2/categories/${id}`);
        if (!res.ok) throw new Error(`Failed to fetch category name. Status: ${res.status}`);
        const data = await res.json();
        return data.name;
    } catch (error) {
        console.error("Error fetching category name:", error);
        return "Unknown Category";
    }
};

const fetchArticlesByCategory = async (categoryId: number) => {
    try {
        const res = await fetch(`https://wp.fiosproject.de/wp-json/wp/v2/posts?categories=${categoryId}`);
        if (!res.ok) throw new Error(`Failed to fetch articles. Status: ${res.status}`);
        const data = await res.json();
        return data;
    } catch (error) {
        console.error("Error fetching articles:", error);
        return [];
    }
};

const fetchHashtagsForArticle = async (articleId: number) => {
    try {
        const res = await fetch(`https://wp.fiosproject.de/wp-json/wp/v2/tags?post=${articleId}`);
        if (!res.ok) throw new Error(`Failed to fetch hashtags. Status: ${res.status}`);
        const data = await res.json();
        return data.map(tag => tag.name);
    } catch (error) {
        console.error("Error fetching hashtags:", error);
        return [];
    }
};

const fetchCategoriesForArticle = async (articleId: number) => {
    try {
        const res = await fetch(`https://wp.fiosproject.de/wp-json/wp/v2/categories?post=${articleId}`);
        if (!res.ok) throw new Error(`Failed to fetch categories. Status: ${res.status}`);
        const data = await res.json();
        return data.map(category => category.name);
    } catch (error) {
        console.error("Error fetching categories:", error);
        return [];
    }
};

const { categorie } = Astro.params; // Get the value of the categorie parameter (as number)
const categoriename = await fetchCategoryName(categorie); // Get the name of the category from the number
const articles = await fetchArticlesByCategory(categorie); // Fetch articles by category

import Main from '../../layouts/Main.astro';
import Split from '../../layouts/Split.astro';

// Import Widgets
import Weather from "../../components/widgets/Weather.astro";
import Poll from "../../components/widgets/Poll.astro";
import NewArticles from "../../components/widgets/NewArticles.astro";
import Hashtags from "../../components/widgets/Hashtags.astro";

import Hashtag from '../../components/Hashtag.astro';
import Card from '../../components/Card.astro';

interface WeatherData {
    description?: string;
    temperature?: number;
    iconurl?: string;
}

// Async function for data fetching
async function fetchWeatherData() {
    let weatherData: WeatherData = {};
    try {
        const res = await fetch("http://localhost:3000/weather");
        if (!res.ok) throw new Error(`Failed to fetch weather data. Status: ${res.status}`);
        weatherData = await res.json();
    } catch (error) {
        console.error("Error fetching weather data:", error);
    }
    return weatherData;
}

const weatherData = await fetchWeatherData();

const question = "Welches Betriebssystem verwenden Sie am häufigsten?";
const answers = JSON.stringify(["Windows", "macOS", "Linux", "Andere"]);

const pageTitle = `PINGUIN | ${categorie}`;
---
<Main>
    <Split>
        <div slot="Articles">
            <div class="max-w-3xl mx-auto p-6 bg-blue-100 rounded-3xl shadow-lg flex-1 h-fit mb-5">
                <h1 class="flex justify-center align-middle text-2xl text-blue-800 font-bold">
                    Alle Beiträge mit: &nbsp; <Hashtag hashtag={categoriename} />
                </h1>
            </div>
            {articles.length > 0 ? (
                Promise.all(
                    articles.map(async (article) => {
                        const hashtags = await fetchHashtagsForArticle(article.id);
                        const categories = await fetchCategoriesForArticle(article.id);
                        return (
                                <Card
                                        title={article.title.rendered}
                                        description={article.excerpt.rendered}
                                        href={`/article/${article.slug}`}
                                        fimage={article.featured_media_url}
                                        hashtags={[...hashtags, ...categories]}
                                />
                        );
                    })
                ).then(cards => cards)
            ) : (
                    <p>Keine Artikel gefunden.</p>
            )}
        </div>
        <div slot="Widgets">
            <Weather degrees={weatherData.temperature} iconurl={weatherData.iconurl} />
            <Poll question={question} answers={answers} />
            <NewArticles articles={["Artikel 1", "Artikel 2", "Artikel 3"]} />
            <Hashtags hashtags={["Video", "Essen", "dsa"]} />
        </div>
    </Split>
</Main>
